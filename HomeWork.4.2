// Разработать класс Fraction, представляющий простую дробь. в классе предусмотреть два поля: числитель
// и знаменатель дроби. Выполнить перегрузку следующих операторов: +,-,*,/,==,!=,<,>, true и false. Арифметические действия и сравнение выполняется
// в соответствии с правилами работы с дробями. Оператор true возвращает true если дробь правильная
// (числитель меньше знаменателя), оператор false возвращает true если дробь неправильная (числитель больше знаменателя).
// Выполнить перегрузку операторов, необходимых для успешной компиляции следующего фрагмента кода:
//          Fraction f = new Fraction(3, 4);
//          int a = 10;
//          Fraction f1 = f * a;
//          Fraction f2 = a * f;
//          double d = 1.5;
//          Fraction f3 = f + d;

using System;

namespace HomeWork.4.1
{
    class Fraction
    {
        private int zn;
        private int ch;
        public int Chislitel { get => ch; set => ch = value; }
        public int Znamenatel
        {
            get => zn;
            set
            {
                if (value == 0)
                    throw new DivideByZeroException("!/ -> 0");
                zn = value;
            }
        }
        public Fraction(int chislitel, int znamenatel)
        {
            Chislitel = chislitel;
            Znamenatel = znamenatel;
        }
        public override string ToString()
        {
            if (ch > zn)
                return $"{ch}/{zn}";
            else if (ch < zn)
                return $"{ch}/{zn}";
            else
                return "1";
        }
        public static Fraction operator +(Fraction a, Fraction b)
        {
            return new Fraction(a.ch * b.zn + b.ch * a.zn, a.zn * b.zn);
        }
        public static Fraction operator -(Fraction a, Fraction b)
        {
            return new Fraction(a.ch * b.zn - b.ch * a.zn, a.zn * b.zn);
        }
        public static Fraction operator *(Fraction a, Fraction b)
        {
            return new Fraction(a.ch * b.ch, a.zn * b.zn);
        }
        public static Fraction operator /(Fraction a, Fraction b)
        {
            return new Fraction(a.ch * b.ch, a.zn * b.zn);
        }
        public static Fraction operator ++(Fraction a)
        {
            return new Fraction(++a.ch, a.zn);
        }
        public static Fraction operator --(Fraction a)
        {
            return new Fraction(--a.ch, a.zn);
        }
        public static Fraction operator -(Fraction a)
        {
            return new Fraction(-a.ch, a.zn);
        }
        public static bool operator >(Fraction a, Fraction b)
        {
            return a.ch * b.zn > b.ch * a.zn;
        }
        public static bool operator <(Fraction a, Fraction b)
        {
            return a.ch * b.zn < b.ch * a.zn;
        }
        public static bool operator >=(Fraction a, Fraction b)
        {
            return a.ch * b.zn >= b.ch * a.zn;
        }
        public static bool operator <=(Fraction a, Fraction b)
        {
            return a.ch * b.zn <= b.ch * a.zn;
        }
        public static bool operator ==(Fraction a, Fraction b)
        {
            return a.ch * b.zn == b.ch * a.zn;
        }
        public static bool operator !=(Fraction a, Fraction b)
        {
            return a.ch * b.zn != b.ch * a.zn;
        }
        public static bool operator true(Fraction a)
        {
            return a.ch < a.zn;
        }
        public static bool operator false(Fraction a)
        {
            return a.ch > a.zn;
        }
        public static explicit operator int(Fraction a)
        {
            return a.ch / a.zn;
        }
        public static implicit operator double(Fraction a)
        {
            return a.ch / (double)a.zn;
        }
        public static Fraction operator *(Fraction a, int x)
        {
            return new Fraction(a.ch * x, a.zn * 1);
        }
        public static Fraction operator *(int x, Fraction a)
        {
            return new Fraction(x * a.ch, a.zn * 1);
        }
        public static Fraction operator +(Fraction a, double x)
        {
            int znam = 1;
            while (x > (int)x)
            {
                x *= 10;
                znam *= 10;
            }
            Fraction f = new Fraction((int)x, znam);
            return a + f;
        }
        public static Fraction operator +(double x, Fraction a)
        {
            int znam = 1;
            while (x > (int)x)
            {
                x *= 10;
                znam *= 10;
            }
            Fraction f = new Fraction((int)x, znam);
            return a + f;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Fraction f = new Fraction(3, 4);
            int a = 10;
            Fraction f1 = f * a;
            Fraction f2 = a * f;
            double d = 1.5;
            Fraction f3 = f + d;
            Console.WriteLine($"f1 = {f1}");
            Console.WriteLine($"f2 = {f2}");
            Console.WriteLine($"f3 = {f3}");
        }
    }
}
